{"ast":null,"code":"var __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { Component } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nclass Item {\n  task;\n  done;\n  data;\n  constructor(task, data) {\n    this.task = task;\n    this.data = data;\n    this.done = false;\n  }\n}\nlet AppComponent = (() => {\n  let _classDecorators = [Component({\n    selector: \"my-app\",\n    standalone: true,\n    imports: [FormsModule],\n    template: `\n    <h1>Список дел</h1>\n    <div>\n    <p>\n    <label>Задача:</label><br>\n    <input [(ngModel)]=\"text\" />\n    </p>\n    <p>\n    <label>Дата:</label><br>\n    <input type=\"number\" [(ngModel)]=\"data\" />\n    </p>\n    <button (click)=\"addItem(text, data)\">Добавить</button>\n    </div>\n    <table>\n    <thead>\n    <tr>\n    <th>Задача</th>\n    <th>Дата</th>\n    <th>Выполнено</th>\n    </tr>\n    </thead>\n    <tbody>\n        @for (item of items; track item.task) {\n            <tr>\n                <td>{{item.task}}</td>\n                <td>{{item.data}}</td>\n                <td><del><input type=\"checkbox\" [(ngModel)] = \"item.done\"/></td>\n            </tr>\n        }\n    </tbody>\n    </table>`\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var AppComponent = class {\n    static #_ = _classThis = this;\n    static #_2 = (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      AppComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    text = \"\";\n    data = 0;\n    items = [{\n      task: \"Сходить в магазин\",\n      done: false,\n      data: 25.04\n    }, {\n      task: \"Купить билет\",\n      done: false,\n      data: 29.01\n    }];\n    addItem(text, data) {\n      if (text == null || text.trim() == \"\" || data == null) return;\n      this.items.push(new Item(text, data));\n    }\n  };\n  return AppComponent = _classThis;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}